.. _yoda:


YODA: Best practices for data analyses in a dataset
---------------------------------------------------

.. figure:: ../img/yoda.png
   :figwidth: 50%
   :alt: A very cute YODA


[Disclaimer: This section is based on a
`poster and abstract <https://f1000research.com/posters/7-1965>`_ by
Hanke et al., 2018]

The last requirement for the midterm projects reads "needs to comply to the
YODA principles".
"What are the YODA principles?" you ask, as you have never heard of this
before.

"The topic of today's lecture!", you hear in response. "At the end of
the session, we'll be talking about the midterm projects. But now we
will talk about organizational principles of data analyses in DataLad
datasets."

"The YODA principles are a clear set of organizational standards for
a dataset used for data analysis projects. This is where the name derives
from: YODA stands for YODAs Organigram on Data Analysis." [#f1]_

"We can summarize them in a handful of simple best practices, that translate to a
dataset structure:

#. The (raw) data for the analysis project, structured following community
   guidelines of the given field, is stored as an independent component of
   the dataset as subdatasets. These data should live in an ``inputs/``
   directory

#. Scripts or code used for the analysis of the data is stored in a dedicated
   ``code/`` directory, outside of the data component of the dataset.

#. Within ``code/``, add tests for your software/code, and use automated
   computing, for example
   `continuous integration systems <https://en.wikipedia.org/wiki/Continuous_integration>`_,
   to assess the functionality of your functions and scripts. The setup
   for continuous integration frameworks, such as
   ``Travis <>`_ lives outside of ``code/``, in a dedicated ``ci``
   directory

#. The results of an analysis should be kept in a dedicated ``outputs/``
   directory in the dataset, away from the ``inputs/`` the results were
   derived from.

#. Include documents for fellow humans: Notes, the scientific paper you
   wrote about your analysis, a README.md, a HOWTO.md, or even proper
   documentation in a dedicated ``docs/`` directory. Within these documents,
   include all relevant metadata for your analysis. If you are
   conducting a scientific study, this might be authorship, funding,
   change log, etc.

#. Include a place for complete execution environments, for example
   `singularity images <https://singularity.lbl.gov/>`_ or
   `docker containers <https://www.docker.com/get-started>`_ , in
   the form of an ``envs/`` directory, if relevant for your analysis.


This directory structure has all of the components the YODA principles talk
about:

.. code-block:: bash

    ├── ci/
    │   └── .travis.yml
    ├── code/
    │   ├── tests/
    │   │   └── test_myscript.py
    │   └── myscript.py
    ├── docs
    │   ├── build/
    │   └── source/
    ├── envs
    │   └── Singularity
    ├── inputs/
    │   └─── data/
    │       ├── dataset1/
    │       │   └── datafile_a
    │       └── dataset2/
    │           └── datafile_a
    ├── outputs/
    │   └── important_results/
    │       └── figures/
    ├── tests/
    ├── CHANGELOG.md
    ├── HOWTO.md
    └── README.md




"These standards are not complex -- quite the opposite, they are very
intuitive. Most data analysis projects however do not start out with
such organization, or fail to keep the structural organization of a
directory intact as the project develops. Often, this can be due to not
version-controlling analysis projects. In these cases, one could quickly end up
with many almost-identical scripts suffixed with ``_version_xyz``,
or a chaotic results structure split between various directories with names
such as ``results``, ``results_August19``, ``results_revision``, ``nicer_plots``.








.. rubric:: Footnotes

.. [#f1] "Why does the acronym contain itself?" you ask confused.
         "That's because it's a `recursive acronym <https://en.wikipedia.org/wiki/Recursive_acronym>`_,
         where the first letter stands recursively for the whole acronym." you get in response.
         "And what does all of this have to do with Yoda?" you ask mildly amused.
         "Oh, well. That's just because the DataLad team is full of geeks."